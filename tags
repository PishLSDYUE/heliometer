!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CellContent	src/lib.rs	/^type CellContent = u8;$/;"	T
Error	src/lib.rs	/^pub enum Error {$/;"	g
From for Error	src/lib.rs	/^impl From<std::io::Error> for Error {$/;"	i
State	src/lib.rs	/^impl<'s, R: std::io::Read, W: std::io::Write> State<'s, R, W> {$/;"	i
State	src/lib.rs	/^struct State<'s, R: std::io::Read + 's, W: std::io::Write + 's> {$/;"	s
Tape	src/lib.rs	/^impl Tape {$/;"	i
Tape	src/lib.rs	/^struct Tape {$/;"	s
decrement	src/lib.rs	/^    pub fn decrement(&mut self, index: usize) {$/;"	f
execute	src/lib.rs	/^    pub fn execute(&mut self) -> Result<(), Error> {$/;"	f
execute	src/lib.rs	/^pub fn execute<R: std::io::Read, W: std::io::Write>($/;"	f
from	src/lib.rs	/^    fn from(err: std::io::Error) -> Error {$/;"	f
get_cell	src/lib.rs	/^    pub fn get_cell(&self, index: usize) -> CellContent {$/;"	f
increment	src/lib.rs	/^    pub fn increment(&mut self, index: usize) {$/;"	f
main	src/main.rs	/^fn main() {$/;"	f
new	src/lib.rs	/^    pub fn new() -> Tape {$/;"	f
new	src/lib.rs	/^    pub fn new<'a>(src: &str, input: &'a mut R, output: &'a mut W)$/;"	f
run_single	src/lib.rs	/^    fn run_single(&mut self) -> Result<bool, Error> {$/;"	f
set_cell	src/lib.rs	/^    pub fn set_cell(&mut self, index: usize, value: CellContent) {$/;"	f
